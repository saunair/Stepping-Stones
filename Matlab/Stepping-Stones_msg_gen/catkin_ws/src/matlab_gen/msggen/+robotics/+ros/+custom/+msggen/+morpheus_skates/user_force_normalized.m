classdef user_force_normalized < robotics.ros.Message
    %user_force_normalized MATLAB implementation of morpheus_skates/user_force_normalized
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'morpheus_skates/user_force_normalized' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'aed377f4f2b3a09b9b9779a3f8aebb24' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        LeftNormalFrontOuter
        LeftNormalFrontInner
        LeftNormalRear
        RightNormalFrontOuter
        RightNormalFrontInner
        RightNormalRear
        RightNormalTotal
        LeftNormalTotal
        NormalTotal
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'LeftNormalFrontInner', 'LeftNormalFrontOuter', 'LeftNormalRear', 'LeftNormalTotal', 'NormalTotal', 'RightNormalFrontInner', 'RightNormalFrontOuter', 'RightNormalRear', 'RightNormalTotal'} % List of non-constant message properties
        ROSPropertyList = {'header', 'left_normal_front_inner', 'left_normal_front_outer', 'left_normal_rear', 'left_normal_total', 'normal_total', 'right_normal_front_inner', 'right_normal_front_outer', 'right_normal_rear', 'right_normal_total'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = user_force_normalized(msg)
            %user_force_normalized Construct the message object user_force_normalized
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'user_force_normalized', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function leftnormalfrontouter = get.LeftNormalFrontOuter(obj)
            %get.LeftNormalFrontOuter Get the value for property LeftNormalFrontOuter
            leftnormalfrontouter = single(obj.JavaMessage.getLeftNormalFrontOuter);
        end
        
        function set.LeftNormalFrontOuter(obj, leftnormalfrontouter)
            %set.LeftNormalFrontOuter Set the value for property LeftNormalFrontOuter
            validateattributes(leftnormalfrontouter, {'numeric'}, {'nonempty', 'scalar'}, 'user_force_normalized', 'LeftNormalFrontOuter');
            
            obj.JavaMessage.setLeftNormalFrontOuter(leftnormalfrontouter);
        end
        
        function leftnormalfrontinner = get.LeftNormalFrontInner(obj)
            %get.LeftNormalFrontInner Get the value for property LeftNormalFrontInner
            leftnormalfrontinner = single(obj.JavaMessage.getLeftNormalFrontInner);
        end
        
        function set.LeftNormalFrontInner(obj, leftnormalfrontinner)
            %set.LeftNormalFrontInner Set the value for property LeftNormalFrontInner
            validateattributes(leftnormalfrontinner, {'numeric'}, {'nonempty', 'scalar'}, 'user_force_normalized', 'LeftNormalFrontInner');
            
            obj.JavaMessage.setLeftNormalFrontInner(leftnormalfrontinner);
        end
        
        function leftnormalrear = get.LeftNormalRear(obj)
            %get.LeftNormalRear Get the value for property LeftNormalRear
            leftnormalrear = single(obj.JavaMessage.getLeftNormalRear);
        end
        
        function set.LeftNormalRear(obj, leftnormalrear)
            %set.LeftNormalRear Set the value for property LeftNormalRear
            validateattributes(leftnormalrear, {'numeric'}, {'nonempty', 'scalar'}, 'user_force_normalized', 'LeftNormalRear');
            
            obj.JavaMessage.setLeftNormalRear(leftnormalrear);
        end
        
        function rightnormalfrontouter = get.RightNormalFrontOuter(obj)
            %get.RightNormalFrontOuter Get the value for property RightNormalFrontOuter
            rightnormalfrontouter = single(obj.JavaMessage.getRightNormalFrontOuter);
        end
        
        function set.RightNormalFrontOuter(obj, rightnormalfrontouter)
            %set.RightNormalFrontOuter Set the value for property RightNormalFrontOuter
            validateattributes(rightnormalfrontouter, {'numeric'}, {'nonempty', 'scalar'}, 'user_force_normalized', 'RightNormalFrontOuter');
            
            obj.JavaMessage.setRightNormalFrontOuter(rightnormalfrontouter);
        end
        
        function rightnormalfrontinner = get.RightNormalFrontInner(obj)
            %get.RightNormalFrontInner Get the value for property RightNormalFrontInner
            rightnormalfrontinner = single(obj.JavaMessage.getRightNormalFrontInner);
        end
        
        function set.RightNormalFrontInner(obj, rightnormalfrontinner)
            %set.RightNormalFrontInner Set the value for property RightNormalFrontInner
            validateattributes(rightnormalfrontinner, {'numeric'}, {'nonempty', 'scalar'}, 'user_force_normalized', 'RightNormalFrontInner');
            
            obj.JavaMessage.setRightNormalFrontInner(rightnormalfrontinner);
        end
        
        function rightnormalrear = get.RightNormalRear(obj)
            %get.RightNormalRear Get the value for property RightNormalRear
            rightnormalrear = single(obj.JavaMessage.getRightNormalRear);
        end
        
        function set.RightNormalRear(obj, rightnormalrear)
            %set.RightNormalRear Set the value for property RightNormalRear
            validateattributes(rightnormalrear, {'numeric'}, {'nonempty', 'scalar'}, 'user_force_normalized', 'RightNormalRear');
            
            obj.JavaMessage.setRightNormalRear(rightnormalrear);
        end
        
        function rightnormaltotal = get.RightNormalTotal(obj)
            %get.RightNormalTotal Get the value for property RightNormalTotal
            rightnormaltotal = single(obj.JavaMessage.getRightNormalTotal);
        end
        
        function set.RightNormalTotal(obj, rightnormaltotal)
            %set.RightNormalTotal Set the value for property RightNormalTotal
            validateattributes(rightnormaltotal, {'numeric'}, {'nonempty', 'scalar'}, 'user_force_normalized', 'RightNormalTotal');
            
            obj.JavaMessage.setRightNormalTotal(rightnormaltotal);
        end
        
        function leftnormaltotal = get.LeftNormalTotal(obj)
            %get.LeftNormalTotal Get the value for property LeftNormalTotal
            leftnormaltotal = single(obj.JavaMessage.getLeftNormalTotal);
        end
        
        function set.LeftNormalTotal(obj, leftnormaltotal)
            %set.LeftNormalTotal Set the value for property LeftNormalTotal
            validateattributes(leftnormaltotal, {'numeric'}, {'nonempty', 'scalar'}, 'user_force_normalized', 'LeftNormalTotal');
            
            obj.JavaMessage.setLeftNormalTotal(leftnormaltotal);
        end
        
        function normaltotal = get.NormalTotal(obj)
            %get.NormalTotal Get the value for property NormalTotal
            normaltotal = single(obj.JavaMessage.getNormalTotal);
        end
        
        function set.NormalTotal(obj, normaltotal)
            %set.NormalTotal Set the value for property NormalTotal
            validateattributes(normaltotal, {'numeric'}, {'nonempty', 'scalar'}, 'user_force_normalized', 'NormalTotal');
            
            obj.JavaMessage.setNormalTotal(normaltotal);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.LeftNormalFrontOuter = obj.LeftNormalFrontOuter;
            cpObj.LeftNormalFrontInner = obj.LeftNormalFrontInner;
            cpObj.LeftNormalRear = obj.LeftNormalRear;
            cpObj.RightNormalFrontOuter = obj.RightNormalFrontOuter;
            cpObj.RightNormalFrontInner = obj.RightNormalFrontInner;
            cpObj.RightNormalRear = obj.RightNormalRear;
            cpObj.RightNormalTotal = obj.RightNormalTotal;
            cpObj.LeftNormalTotal = obj.LeftNormalTotal;
            cpObj.NormalTotal = obj.NormalTotal;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.LeftNormalFrontOuter = strObj.LeftNormalFrontOuter;
            obj.LeftNormalFrontInner = strObj.LeftNormalFrontInner;
            obj.LeftNormalRear = strObj.LeftNormalRear;
            obj.RightNormalFrontOuter = strObj.RightNormalFrontOuter;
            obj.RightNormalFrontInner = strObj.RightNormalFrontInner;
            obj.RightNormalRear = strObj.RightNormalRear;
            obj.RightNormalTotal = strObj.RightNormalTotal;
            obj.LeftNormalTotal = strObj.LeftNormalTotal;
            obj.NormalTotal = strObj.NormalTotal;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.LeftNormalFrontOuter = obj.LeftNormalFrontOuter;
            strObj.LeftNormalFrontInner = obj.LeftNormalFrontInner;
            strObj.LeftNormalRear = obj.LeftNormalRear;
            strObj.RightNormalFrontOuter = obj.RightNormalFrontOuter;
            strObj.RightNormalFrontInner = obj.RightNormalFrontInner;
            strObj.RightNormalRear = obj.RightNormalRear;
            strObj.RightNormalTotal = obj.RightNormalTotal;
            strObj.LeftNormalTotal = obj.LeftNormalTotal;
            strObj.NormalTotal = obj.NormalTotal;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.morpheus_skates.user_force_normalized.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.morpheus_skates.user_force_normalized;
            obj.reload(strObj);
        end
    end
end
