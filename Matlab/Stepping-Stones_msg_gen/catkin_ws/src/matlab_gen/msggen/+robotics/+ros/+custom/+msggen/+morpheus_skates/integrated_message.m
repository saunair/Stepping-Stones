classdef integrated_message < robotics.ros.Message
    %integrated_message MATLAB implementation of morpheus_skates/integrated_message
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'morpheus_skates/integrated_message' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7060d7dd9e750fdece000d51f70355d1' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MorpheusSkatesPoundsDisplayClass = robotics.ros.msg.internal.MessageFactory.getClassForType('morpheus_skates/pounds_display') % Dispatch to MATLAB class for message type morpheus_skates/pounds_display
        MorpheusSkatesSkateCommandClass = robotics.ros.msg.internal.MessageFactory.getClassForType('morpheus_skates/skate_command') % Dispatch to MATLAB class for message type morpheus_skates/skate_command
        MorpheusSkatesSkateFeedbackClass = robotics.ros.msg.internal.MessageFactory.getClassForType('morpheus_skates/skate_feedback') % Dispatch to MATLAB class for message type morpheus_skates/skate_feedback
        MorpheusSkatesUserForceNormalizedClass = robotics.ros.msg.internal.MessageFactory.getClassForType('morpheus_skates/user_force_normalized') % Dispatch to MATLAB class for message type morpheus_skates/user_force_normalized
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        LeftFeedback
        RightFeedback
        LeftCommand
        RightCommand
        NormalizedForce
        PoundsValues
        UserPositionOffset
        CentreOfMassKinect
        HipLeft
        HipRight
        FootLeft
        FootRight
        KinectZero
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'LeftFeedback', [], 'RightFeedback', [], 'LeftCommand', [], 'RightCommand', [], 'NormalizedForce', [], 'PoundsValues', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CentreOfMassKinect', 'FootLeft', 'FootRight', 'Header', 'HipLeft', 'HipRight', 'KinectZero', 'LeftCommand', 'LeftFeedback', 'NormalizedForce', 'PoundsValues', 'RightCommand', 'RightFeedback', 'UserPositionOffset'} % List of non-constant message properties
        ROSPropertyList = {'centre_of_mass_kinect', 'foot_left', 'foot_right', 'header', 'hip_left', 'hip_right', 'kinect_zero', 'left_command', 'left_feedback', 'normalized_force', 'pounds_values', 'right_command', 'right_feedback', 'user_position_offset'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = integrated_message(msg)
            %integrated_message Construct the message object integrated_message
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'integrated_message', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function leftfeedback = get.LeftFeedback(obj)
            %get.LeftFeedback Get the value for property LeftFeedback
            if isempty(obj.Cache.LeftFeedback)
                obj.Cache.LeftFeedback = feval(obj.MorpheusSkatesSkateFeedbackClass, obj.JavaMessage.getLeftFeedback);
            end
            leftfeedback = obj.Cache.LeftFeedback;
        end
        
        function set.LeftFeedback(obj, leftfeedback)
            %set.LeftFeedback Set the value for property LeftFeedback
            validateattributes(leftfeedback, {obj.MorpheusSkatesSkateFeedbackClass}, {'nonempty', 'scalar'}, 'integrated_message', 'LeftFeedback');
            
            obj.JavaMessage.setLeftFeedback(leftfeedback.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LeftFeedback)
                obj.Cache.LeftFeedback.setJavaObject(leftfeedback.getJavaObject);
            end
        end
        
        function rightfeedback = get.RightFeedback(obj)
            %get.RightFeedback Get the value for property RightFeedback
            if isempty(obj.Cache.RightFeedback)
                obj.Cache.RightFeedback = feval(obj.MorpheusSkatesSkateFeedbackClass, obj.JavaMessage.getRightFeedback);
            end
            rightfeedback = obj.Cache.RightFeedback;
        end
        
        function set.RightFeedback(obj, rightfeedback)
            %set.RightFeedback Set the value for property RightFeedback
            validateattributes(rightfeedback, {obj.MorpheusSkatesSkateFeedbackClass}, {'nonempty', 'scalar'}, 'integrated_message', 'RightFeedback');
            
            obj.JavaMessage.setRightFeedback(rightfeedback.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RightFeedback)
                obj.Cache.RightFeedback.setJavaObject(rightfeedback.getJavaObject);
            end
        end
        
        function leftcommand = get.LeftCommand(obj)
            %get.LeftCommand Get the value for property LeftCommand
            if isempty(obj.Cache.LeftCommand)
                obj.Cache.LeftCommand = feval(obj.MorpheusSkatesSkateCommandClass, obj.JavaMessage.getLeftCommand);
            end
            leftcommand = obj.Cache.LeftCommand;
        end
        
        function set.LeftCommand(obj, leftcommand)
            %set.LeftCommand Set the value for property LeftCommand
            validateattributes(leftcommand, {obj.MorpheusSkatesSkateCommandClass}, {'nonempty', 'scalar'}, 'integrated_message', 'LeftCommand');
            
            obj.JavaMessage.setLeftCommand(leftcommand.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LeftCommand)
                obj.Cache.LeftCommand.setJavaObject(leftcommand.getJavaObject);
            end
        end
        
        function rightcommand = get.RightCommand(obj)
            %get.RightCommand Get the value for property RightCommand
            if isempty(obj.Cache.RightCommand)
                obj.Cache.RightCommand = feval(obj.MorpheusSkatesSkateCommandClass, obj.JavaMessage.getRightCommand);
            end
            rightcommand = obj.Cache.RightCommand;
        end
        
        function set.RightCommand(obj, rightcommand)
            %set.RightCommand Set the value for property RightCommand
            validateattributes(rightcommand, {obj.MorpheusSkatesSkateCommandClass}, {'nonempty', 'scalar'}, 'integrated_message', 'RightCommand');
            
            obj.JavaMessage.setRightCommand(rightcommand.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RightCommand)
                obj.Cache.RightCommand.setJavaObject(rightcommand.getJavaObject);
            end
        end
        
        function normalizedforce = get.NormalizedForce(obj)
            %get.NormalizedForce Get the value for property NormalizedForce
            if isempty(obj.Cache.NormalizedForce)
                obj.Cache.NormalizedForce = feval(obj.MorpheusSkatesUserForceNormalizedClass, obj.JavaMessage.getNormalizedForce);
            end
            normalizedforce = obj.Cache.NormalizedForce;
        end
        
        function set.NormalizedForce(obj, normalizedforce)
            %set.NormalizedForce Set the value for property NormalizedForce
            validateattributes(normalizedforce, {obj.MorpheusSkatesUserForceNormalizedClass}, {'nonempty', 'scalar'}, 'integrated_message', 'NormalizedForce');
            
            obj.JavaMessage.setNormalizedForce(normalizedforce.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.NormalizedForce)
                obj.Cache.NormalizedForce.setJavaObject(normalizedforce.getJavaObject);
            end
        end
        
        function poundsvalues = get.PoundsValues(obj)
            %get.PoundsValues Get the value for property PoundsValues
            if isempty(obj.Cache.PoundsValues)
                obj.Cache.PoundsValues = feval(obj.MorpheusSkatesPoundsDisplayClass, obj.JavaMessage.getPoundsValues);
            end
            poundsvalues = obj.Cache.PoundsValues;
        end
        
        function set.PoundsValues(obj, poundsvalues)
            %set.PoundsValues Set the value for property PoundsValues
            validateattributes(poundsvalues, {obj.MorpheusSkatesPoundsDisplayClass}, {'nonempty', 'scalar'}, 'integrated_message', 'PoundsValues');
            
            obj.JavaMessage.setPoundsValues(poundsvalues.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PoundsValues)
                obj.Cache.PoundsValues.setJavaObject(poundsvalues.getJavaObject);
            end
        end
        
        function userpositionoffset = get.UserPositionOffset(obj)
            %get.UserPositionOffset Get the value for property UserPositionOffset
            userpositionoffset = double(obj.JavaMessage.getUserPositionOffset);
        end
        
        function set.UserPositionOffset(obj, userpositionoffset)
            %set.UserPositionOffset Set the value for property UserPositionOffset
            validateattributes(userpositionoffset, {'numeric'}, {'nonempty', 'scalar'}, 'integrated_message', 'UserPositionOffset');
            
            obj.JavaMessage.setUserPositionOffset(userpositionoffset);
        end
        
        function centreofmasskinect = get.CentreOfMassKinect(obj)
            %get.CentreOfMassKinect Get the value for property CentreOfMassKinect
            javaArray = obj.JavaMessage.getCentreOfMassKinect;
            array = obj.readJavaArray(javaArray, 'double');
            centreofmasskinect = double(array);
        end
        
        function set.CentreOfMassKinect(obj, centreofmasskinect)
            %set.CentreOfMassKinect Set the value for property CentreOfMassKinect
            validateattributes(centreofmasskinect, {'numeric'}, {'vector', 'numel', 3}, 'integrated_message', 'CentreOfMassKinect');
            
            javaArray = obj.JavaMessage.getCentreOfMassKinect;
            array = obj.writeJavaArray(centreofmasskinect, javaArray, 'double');
            obj.JavaMessage.setCentreOfMassKinect(array);
        end
        
        function hipleft = get.HipLeft(obj)
            %get.HipLeft Get the value for property HipLeft
            javaArray = obj.JavaMessage.getHipLeft;
            array = obj.readJavaArray(javaArray, 'double');
            hipleft = double(array);
        end
        
        function set.HipLeft(obj, hipleft)
            %set.HipLeft Set the value for property HipLeft
            validateattributes(hipleft, {'numeric'}, {'vector', 'numel', 3}, 'integrated_message', 'HipLeft');
            
            javaArray = obj.JavaMessage.getHipLeft;
            array = obj.writeJavaArray(hipleft, javaArray, 'double');
            obj.JavaMessage.setHipLeft(array);
        end
        
        function hipright = get.HipRight(obj)
            %get.HipRight Get the value for property HipRight
            javaArray = obj.JavaMessage.getHipRight;
            array = obj.readJavaArray(javaArray, 'double');
            hipright = double(array);
        end
        
        function set.HipRight(obj, hipright)
            %set.HipRight Set the value for property HipRight
            validateattributes(hipright, {'numeric'}, {'vector', 'numel', 3}, 'integrated_message', 'HipRight');
            
            javaArray = obj.JavaMessage.getHipRight;
            array = obj.writeJavaArray(hipright, javaArray, 'double');
            obj.JavaMessage.setHipRight(array);
        end
        
        function footleft = get.FootLeft(obj)
            %get.FootLeft Get the value for property FootLeft
            javaArray = obj.JavaMessage.getFootLeft;
            array = obj.readJavaArray(javaArray, 'double');
            footleft = double(array);
        end
        
        function set.FootLeft(obj, footleft)
            %set.FootLeft Set the value for property FootLeft
            validateattributes(footleft, {'numeric'}, {'vector', 'numel', 3}, 'integrated_message', 'FootLeft');
            
            javaArray = obj.JavaMessage.getFootLeft;
            array = obj.writeJavaArray(footleft, javaArray, 'double');
            obj.JavaMessage.setFootLeft(array);
        end
        
        function footright = get.FootRight(obj)
            %get.FootRight Get the value for property FootRight
            javaArray = obj.JavaMessage.getFootRight;
            array = obj.readJavaArray(javaArray, 'double');
            footright = double(array);
        end
        
        function set.FootRight(obj, footright)
            %set.FootRight Set the value for property FootRight
            validateattributes(footright, {'numeric'}, {'vector', 'numel', 3}, 'integrated_message', 'FootRight');
            
            javaArray = obj.JavaMessage.getFootRight;
            array = obj.writeJavaArray(footright, javaArray, 'double');
            obj.JavaMessage.setFootRight(array);
        end
        
        function kinectzero = get.KinectZero(obj)
            %get.KinectZero Get the value for property KinectZero
            javaArray = obj.JavaMessage.getKinectZero;
            array = obj.readJavaArray(javaArray, 'double');
            kinectzero = double(array);
        end
        
        function set.KinectZero(obj, kinectzero)
            %set.KinectZero Set the value for property KinectZero
            validateattributes(kinectzero, {'numeric'}, {'vector', 'numel', 3}, 'integrated_message', 'KinectZero');
            
            javaArray = obj.JavaMessage.getKinectZero;
            array = obj.writeJavaArray(kinectzero, javaArray, 'double');
            obj.JavaMessage.setKinectZero(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.LeftFeedback = [];
            obj.Cache.RightFeedback = [];
            obj.Cache.LeftCommand = [];
            obj.Cache.RightCommand = [];
            obj.Cache.NormalizedForce = [];
            obj.Cache.PoundsValues = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.UserPositionOffset = obj.UserPositionOffset;
            cpObj.CentreOfMassKinect = obj.CentreOfMassKinect;
            cpObj.HipLeft = obj.HipLeft;
            cpObj.HipRight = obj.HipRight;
            cpObj.FootLeft = obj.FootLeft;
            cpObj.FootRight = obj.FootRight;
            cpObj.KinectZero = obj.KinectZero;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.LeftFeedback = copy(obj.LeftFeedback);
            cpObj.RightFeedback = copy(obj.RightFeedback);
            cpObj.LeftCommand = copy(obj.LeftCommand);
            cpObj.RightCommand = copy(obj.RightCommand);
            cpObj.NormalizedForce = copy(obj.NormalizedForce);
            cpObj.PoundsValues = copy(obj.PoundsValues);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.UserPositionOffset = strObj.UserPositionOffset;
            obj.CentreOfMassKinect = strObj.CentreOfMassKinect;
            obj.HipLeft = strObj.HipLeft;
            obj.HipRight = strObj.HipRight;
            obj.FootLeft = strObj.FootLeft;
            obj.FootRight = strObj.FootRight;
            obj.KinectZero = strObj.KinectZero;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.LeftFeedback = feval([obj.MorpheusSkatesSkateFeedbackClass '.loadobj'], strObj.LeftFeedback);
            obj.RightFeedback = feval([obj.MorpheusSkatesSkateFeedbackClass '.loadobj'], strObj.RightFeedback);
            obj.LeftCommand = feval([obj.MorpheusSkatesSkateCommandClass '.loadobj'], strObj.LeftCommand);
            obj.RightCommand = feval([obj.MorpheusSkatesSkateCommandClass '.loadobj'], strObj.RightCommand);
            obj.NormalizedForce = feval([obj.MorpheusSkatesUserForceNormalizedClass '.loadobj'], strObj.NormalizedForce);
            obj.PoundsValues = feval([obj.MorpheusSkatesPoundsDisplayClass '.loadobj'], strObj.PoundsValues);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.UserPositionOffset = obj.UserPositionOffset;
            strObj.CentreOfMassKinect = obj.CentreOfMassKinect;
            strObj.HipLeft = obj.HipLeft;
            strObj.HipRight = obj.HipRight;
            strObj.FootLeft = obj.FootLeft;
            strObj.FootRight = obj.FootRight;
            strObj.KinectZero = obj.KinectZero;
            strObj.Header = saveobj(obj.Header);
            strObj.LeftFeedback = saveobj(obj.LeftFeedback);
            strObj.RightFeedback = saveobj(obj.RightFeedback);
            strObj.LeftCommand = saveobj(obj.LeftCommand);
            strObj.RightCommand = saveobj(obj.RightCommand);
            strObj.NormalizedForce = saveobj(obj.NormalizedForce);
            strObj.PoundsValues = saveobj(obj.PoundsValues);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.morpheus_skates.integrated_message.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.morpheus_skates.integrated_message;
            obj.reload(strObj);
        end
    end
end
