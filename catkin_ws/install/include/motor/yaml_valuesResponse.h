// Generated by gencpp from file motor/yaml_valuesResponse.msg
// DO NOT EDIT!


#ifndef MOTOR_MESSAGE_YAML_VALUESRESPONSE_H
#define MOTOR_MESSAGE_YAML_VALUESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor
{
template <class ContainerAllocator>
struct yaml_valuesResponse_
{
  typedef yaml_valuesResponse_<ContainerAllocator> Type;

  yaml_valuesResponse_()
    : left_bias_f1(0.0)
    , left_bias_f2(0.0)
    , left_bias_f3(0.0)
    , left_gain_f1(0.0)
    , left_gain_f2(0.0)
    , left_gain_f3(0.0)
    , right_bias_f1(0.0)
    , right_bias_f2(0.0)
    , right_bias_f3(0.0)
    , right_gain_f1(0.0)
    , right_gain_f2(0.0)
    , right_gain_f3(0.0)  {
    }
  yaml_valuesResponse_(const ContainerAllocator& _alloc)
    : left_bias_f1(0.0)
    , left_bias_f2(0.0)
    , left_bias_f3(0.0)
    , left_gain_f1(0.0)
    , left_gain_f2(0.0)
    , left_gain_f3(0.0)
    , right_bias_f1(0.0)
    , right_bias_f2(0.0)
    , right_bias_f3(0.0)
    , right_gain_f1(0.0)
    , right_gain_f2(0.0)
    , right_gain_f3(0.0)  {
  (void)_alloc;
    }



   typedef double _left_bias_f1_type;
  _left_bias_f1_type left_bias_f1;

   typedef double _left_bias_f2_type;
  _left_bias_f2_type left_bias_f2;

   typedef double _left_bias_f3_type;
  _left_bias_f3_type left_bias_f3;

   typedef double _left_gain_f1_type;
  _left_gain_f1_type left_gain_f1;

   typedef double _left_gain_f2_type;
  _left_gain_f2_type left_gain_f2;

   typedef double _left_gain_f3_type;
  _left_gain_f3_type left_gain_f3;

   typedef double _right_bias_f1_type;
  _right_bias_f1_type right_bias_f1;

   typedef double _right_bias_f2_type;
  _right_bias_f2_type right_bias_f2;

   typedef double _right_bias_f3_type;
  _right_bias_f3_type right_bias_f3;

   typedef double _right_gain_f1_type;
  _right_gain_f1_type right_gain_f1;

   typedef double _right_gain_f2_type;
  _right_gain_f2_type right_gain_f2;

   typedef double _right_gain_f3_type;
  _right_gain_f3_type right_gain_f3;




  typedef boost::shared_ptr< ::motor::yaml_valuesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor::yaml_valuesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct yaml_valuesResponse_

typedef ::motor::yaml_valuesResponse_<std::allocator<void> > yaml_valuesResponse;

typedef boost::shared_ptr< ::motor::yaml_valuesResponse > yaml_valuesResponsePtr;
typedef boost::shared_ptr< ::motor::yaml_valuesResponse const> yaml_valuesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor::yaml_valuesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor::yaml_valuesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'motor': ['/home/saurabh/catkin_ws/src/motor/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor::yaml_valuesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor::yaml_valuesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor::yaml_valuesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor::yaml_valuesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor::yaml_valuesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor::yaml_valuesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor::yaml_valuesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "599f443ae0f39cd3fc016639ad207690";
  }

  static const char* value(const ::motor::yaml_valuesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x599f443ae0f39cd3ULL;
  static const uint64_t static_value2 = 0xfc016639ad207690ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor::yaml_valuesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor/yaml_valuesResponse";
  }

  static const char* value(const ::motor::yaml_valuesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor::yaml_valuesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 left_bias_f1\n\
float64 left_bias_f2\n\
float64 left_bias_f3\n\
float64 left_gain_f1\n\
float64 left_gain_f2\n\
float64 left_gain_f3\n\
float64 right_bias_f1\n\
float64 right_bias_f2\n\
float64 right_bias_f3\n\
float64 right_gain_f1\n\
float64 right_gain_f2\n\
float64 right_gain_f3\n\
\n\
";
  }

  static const char* value(const ::motor::yaml_valuesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor::yaml_valuesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_bias_f1);
      stream.next(m.left_bias_f2);
      stream.next(m.left_bias_f3);
      stream.next(m.left_gain_f1);
      stream.next(m.left_gain_f2);
      stream.next(m.left_gain_f3);
      stream.next(m.right_bias_f1);
      stream.next(m.right_bias_f2);
      stream.next(m.right_bias_f3);
      stream.next(m.right_gain_f1);
      stream.next(m.right_gain_f2);
      stream.next(m.right_gain_f3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct yaml_valuesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor::yaml_valuesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor::yaml_valuesResponse_<ContainerAllocator>& v)
  {
    s << indent << "left_bias_f1: ";
    Printer<double>::stream(s, indent + "  ", v.left_bias_f1);
    s << indent << "left_bias_f2: ";
    Printer<double>::stream(s, indent + "  ", v.left_bias_f2);
    s << indent << "left_bias_f3: ";
    Printer<double>::stream(s, indent + "  ", v.left_bias_f3);
    s << indent << "left_gain_f1: ";
    Printer<double>::stream(s, indent + "  ", v.left_gain_f1);
    s << indent << "left_gain_f2: ";
    Printer<double>::stream(s, indent + "  ", v.left_gain_f2);
    s << indent << "left_gain_f3: ";
    Printer<double>::stream(s, indent + "  ", v.left_gain_f3);
    s << indent << "right_bias_f1: ";
    Printer<double>::stream(s, indent + "  ", v.right_bias_f1);
    s << indent << "right_bias_f2: ";
    Printer<double>::stream(s, indent + "  ", v.right_bias_f2);
    s << indent << "right_bias_f3: ";
    Printer<double>::stream(s, indent + "  ", v.right_bias_f3);
    s << indent << "right_gain_f1: ";
    Printer<double>::stream(s, indent + "  ", v.right_gain_f1);
    s << indent << "right_gain_f2: ";
    Printer<double>::stream(s, indent + "  ", v.right_gain_f2);
    s << indent << "right_gain_f3: ";
    Printer<double>::stream(s, indent + "  ", v.right_gain_f3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_MESSAGE_YAML_VALUESRESPONSE_H
