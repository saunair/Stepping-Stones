#!/usr/bin/env python
# license removed for brevity
import rospy
import time
from std_msgs.msg import UInt16
import numpy
from motor.srv import *
import tf

import roslib; roslib.load_manifest('motor')




def handle_yaml_send(req):
    global z_x, z_y, z_z 
    print "Returning [%s + %s = %s]"%(z_x, z_y, z_z)
    #return {"zero_x":z_x, "zero_y":z_y, "zero_z":z_z}
    return zero_pointResponse(z_x, z_y, z_z)


def zero_point_server():
    rospy.init_node('kinect_zero')
    global z_x, z_y, z_z, count
    #irospy.init_node('zero_point_server')
    #while not rospy.is_shutdown(): 
    
    listener_trans = tf.TransformListener() 
    #rate = rospy.Rate(10.0)
    while count<11:

        try:
            (trans1,rot1) = listener_trans.lookupTransform('openni_depth_frame', '/left_hip_1', rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            print "faili"
            continue
    
        try:
            (trans2,rot2) = listener_trans.lookupTransform('openni_depth_frame', '/right_hip_1', rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            continue
    
        try:
            if count<10:
                z_x.append((trans2[0] + trans1[0])/2)
                z_y.append((trans2[1] + trans1[1])/2)
                z_z.append((trans2[2] + trans1[2])/2)
                count+=1
        except:
            pass
            #return 
            #rospy.spin()
        try:
            if count==10:
                z_x = float(sum(z_x))/len(z_x)
                z_y = float(sum(z_y))/len(z_y)
                z_z = float(sum(z_z))/len(z_z)
                count+=1
        except:
            z_x = 0
            z_y = 0
            z_z = 0
            pass
    print "Sending yaml values", count
    s = rospy.Service('zero_point', zero_point, handle_zero_point)
    rospy.spin()




#########################################################################

z_x= 3.45787 
z_y=0.0881804
z_z=0.211088
def ask_zero_point():
    rospy.wait_for_service('zero_point')
    try:
        resp1 = rospy.ServiceProxy('zero_point', zero_point)
        resp1 = resp1(1)
        print resp1, "here"
        return resp1.zero_x, resp1.zero_y, resp1.zero_z
        #return resp1
    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def talker():
    pub = rospy.Publisher('servo', UInt16, queue_size=100)
    rospy.init_node('stepping_stones', anonymous=True)
    listener_trans = tf.TransformListener() 
    i = 0
    rate = rospy.Rate(30) # 30hz
    pub.publish(50)
    hello_str = "%d" % 50
    rospy.loginfo(hello_str)
    print "not here bro" 
    #delay
    #time.sleep(5)
    rate = rospy.Rate(30.0)
    while not rospy.is_shutdown():
        try:
            (trans1,rot1) = listener_trans.lookupTransform('/openni_depth_frame', '/left_hip_1', rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            continue
    
        try:
            (trans2,rot2) = listener_trans.lookupTransform('/openni_depth_frame', '/right_hip_1', rospy.Time(0))
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            print "problem"
            continue
    
        z_x = ((trans2[0] + trans1[0])/2)
        z_y = ((trans2[1] + trans1[1])/2)
        z_z = ((trans2[2] + trans1[2])/2)
        i = i + 1
	if i<50:
	    	val = 30
		#pub.publish(50)
		rate.sleep()
		pub.publish(val)
        	rate.sleep()
	
	else:
		val = 65
		#pub.publish(50)
		rate.sleep()
		pub.publish(val)
        	rate.sleep()
	
	hello_str = "%d" % val
        rospy.loginfo(hello_str)
        rate.sleep()

if __name__ == '__main__':
    try:
        z_x, z_y, z_z = ask_zero_point()
        print "ghadiali chutia"
    except rospy.ROSInterruptException:
        rospy.loginfo("Sorry didn't acquire the zero position")
        pass
    except:
        rospy.loginfo("Sorry didn't acquire the zero position")
        z_x = 3.45787 
        z_y = 0.0881804
        z_z = 0.21108

    try:
        talker()
    except rospy.ROSInterruptException:
        pass
