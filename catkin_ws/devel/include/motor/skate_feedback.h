// Generated by gencpp from file motor/skate_feedback.msg
// DO NOT EDIT!


#ifndef MOTOR_MESSAGE_SKATE_FEEDBACK_H
#define MOTOR_MESSAGE_SKATE_FEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace motor
{
template <class ContainerAllocator>
struct skate_feedback_
{
  typedef skate_feedback_<ContainerAllocator> Type;

  skate_feedback_()
    : header()
    , force_front_outer(0)
    , force_front_inner(0)
    , force_rear(0)
    , imu_quat_x(0.0)
    , imu_quat_y(0.0)
    , imu_quat_z(0.0)
    , imu_quat_w(0.0)
    , imu_accel_x(0.0)
    , imu_accel_y(0.0)
    , imu_accel_z(0.0)
    , imu_rate_x(0.0)
    , imu_rate_y(0.0)
    , imu_rate_z(0.0)
    , velocity_cmd_rear(0.0)
    , velocity_cmd_front(0.0)
    , skate_fault(0)
    , position_filt_rear(0.0)
    , position_filt_front(0.0)
    , velocity_filt_rear(0.0)
    , velocity_filt_front(0.0)
    , dead_man_enable(false)
    , controller_target(0.0)
    , skate_mode(0)  {
    }
  skate_feedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , force_front_outer(0)
    , force_front_inner(0)
    , force_rear(0)
    , imu_quat_x(0.0)
    , imu_quat_y(0.0)
    , imu_quat_z(0.0)
    , imu_quat_w(0.0)
    , imu_accel_x(0.0)
    , imu_accel_y(0.0)
    , imu_accel_z(0.0)
    , imu_rate_x(0.0)
    , imu_rate_y(0.0)
    , imu_rate_z(0.0)
    , velocity_cmd_rear(0.0)
    , velocity_cmd_front(0.0)
    , skate_fault(0)
    , position_filt_rear(0.0)
    , position_filt_front(0.0)
    , velocity_filt_rear(0.0)
    , velocity_filt_front(0.0)
    , dead_man_enable(false)
    , controller_target(0.0)
    , skate_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _force_front_outer_type;
  _force_front_outer_type force_front_outer;

   typedef int16_t _force_front_inner_type;
  _force_front_inner_type force_front_inner;

   typedef int16_t _force_rear_type;
  _force_rear_type force_rear;

   typedef float _imu_quat_x_type;
  _imu_quat_x_type imu_quat_x;

   typedef float _imu_quat_y_type;
  _imu_quat_y_type imu_quat_y;

   typedef float _imu_quat_z_type;
  _imu_quat_z_type imu_quat_z;

   typedef float _imu_quat_w_type;
  _imu_quat_w_type imu_quat_w;

   typedef float _imu_accel_x_type;
  _imu_accel_x_type imu_accel_x;

   typedef float _imu_accel_y_type;
  _imu_accel_y_type imu_accel_y;

   typedef float _imu_accel_z_type;
  _imu_accel_z_type imu_accel_z;

   typedef float _imu_rate_x_type;
  _imu_rate_x_type imu_rate_x;

   typedef float _imu_rate_y_type;
  _imu_rate_y_type imu_rate_y;

   typedef float _imu_rate_z_type;
  _imu_rate_z_type imu_rate_z;

   typedef float _velocity_cmd_rear_type;
  _velocity_cmd_rear_type velocity_cmd_rear;

   typedef float _velocity_cmd_front_type;
  _velocity_cmd_front_type velocity_cmd_front;

   typedef uint8_t _skate_fault_type;
  _skate_fault_type skate_fault;

   typedef float _position_filt_rear_type;
  _position_filt_rear_type position_filt_rear;

   typedef float _position_filt_front_type;
  _position_filt_front_type position_filt_front;

   typedef float _velocity_filt_rear_type;
  _velocity_filt_rear_type velocity_filt_rear;

   typedef float _velocity_filt_front_type;
  _velocity_filt_front_type velocity_filt_front;

   typedef uint8_t _dead_man_enable_type;
  _dead_man_enable_type dead_man_enable;

   typedef float _controller_target_type;
  _controller_target_type controller_target;

   typedef int8_t _skate_mode_type;
  _skate_mode_type skate_mode;




  typedef boost::shared_ptr< ::motor::skate_feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor::skate_feedback_<ContainerAllocator> const> ConstPtr;

}; // struct skate_feedback_

typedef ::motor::skate_feedback_<std::allocator<void> > skate_feedback;

typedef boost::shared_ptr< ::motor::skate_feedback > skate_feedbackPtr;
typedef boost::shared_ptr< ::motor::skate_feedback const> skate_feedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor::skate_feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor::skate_feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'motor': ['/home/saurabh/catkin_ws/src/motor/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor::skate_feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor::skate_feedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor::skate_feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor::skate_feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor::skate_feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor::skate_feedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor::skate_feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fcef49017325db1881c7de732fff139";
  }

  static const char* value(const ::motor::skate_feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fcef49017325db1ULL;
  static const uint64_t static_value2 = 0x881c7de732fff139ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor::skate_feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor/skate_feedback";
  }

  static const char* value(const ::motor::skate_feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor::skate_feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int16 force_front_outer\n\
int16 force_front_inner\n\
int16 force_rear\n\
float32 imu_quat_x\n\
float32 imu_quat_y\n\
float32 imu_quat_z\n\
float32 imu_quat_w\n\
float32 imu_accel_x\n\
float32 imu_accel_y\n\
float32 imu_accel_z\n\
float32 imu_rate_x\n\
float32 imu_rate_y \n\
float32 imu_rate_z\n\
float32 velocity_cmd_rear\n\
float32 velocity_cmd_front\n\
uint8 skate_fault\n\
float32 position_filt_rear\n\
float32 position_filt_front\n\
float32 velocity_filt_rear\n\
float32 velocity_filt_front\n\
bool dead_man_enable\n\
float32 controller_target\n\
byte skate_mode\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::motor::skate_feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor::skate_feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.force_front_outer);
      stream.next(m.force_front_inner);
      stream.next(m.force_rear);
      stream.next(m.imu_quat_x);
      stream.next(m.imu_quat_y);
      stream.next(m.imu_quat_z);
      stream.next(m.imu_quat_w);
      stream.next(m.imu_accel_x);
      stream.next(m.imu_accel_y);
      stream.next(m.imu_accel_z);
      stream.next(m.imu_rate_x);
      stream.next(m.imu_rate_y);
      stream.next(m.imu_rate_z);
      stream.next(m.velocity_cmd_rear);
      stream.next(m.velocity_cmd_front);
      stream.next(m.skate_fault);
      stream.next(m.position_filt_rear);
      stream.next(m.position_filt_front);
      stream.next(m.velocity_filt_rear);
      stream.next(m.velocity_filt_front);
      stream.next(m.dead_man_enable);
      stream.next(m.controller_target);
      stream.next(m.skate_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct skate_feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor::skate_feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor::skate_feedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "force_front_outer: ";
    Printer<int16_t>::stream(s, indent + "  ", v.force_front_outer);
    s << indent << "force_front_inner: ";
    Printer<int16_t>::stream(s, indent + "  ", v.force_front_inner);
    s << indent << "force_rear: ";
    Printer<int16_t>::stream(s, indent + "  ", v.force_rear);
    s << indent << "imu_quat_x: ";
    Printer<float>::stream(s, indent + "  ", v.imu_quat_x);
    s << indent << "imu_quat_y: ";
    Printer<float>::stream(s, indent + "  ", v.imu_quat_y);
    s << indent << "imu_quat_z: ";
    Printer<float>::stream(s, indent + "  ", v.imu_quat_z);
    s << indent << "imu_quat_w: ";
    Printer<float>::stream(s, indent + "  ", v.imu_quat_w);
    s << indent << "imu_accel_x: ";
    Printer<float>::stream(s, indent + "  ", v.imu_accel_x);
    s << indent << "imu_accel_y: ";
    Printer<float>::stream(s, indent + "  ", v.imu_accel_y);
    s << indent << "imu_accel_z: ";
    Printer<float>::stream(s, indent + "  ", v.imu_accel_z);
    s << indent << "imu_rate_x: ";
    Printer<float>::stream(s, indent + "  ", v.imu_rate_x);
    s << indent << "imu_rate_y: ";
    Printer<float>::stream(s, indent + "  ", v.imu_rate_y);
    s << indent << "imu_rate_z: ";
    Printer<float>::stream(s, indent + "  ", v.imu_rate_z);
    s << indent << "velocity_cmd_rear: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_cmd_rear);
    s << indent << "velocity_cmd_front: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_cmd_front);
    s << indent << "skate_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.skate_fault);
    s << indent << "position_filt_rear: ";
    Printer<float>::stream(s, indent + "  ", v.position_filt_rear);
    s << indent << "position_filt_front: ";
    Printer<float>::stream(s, indent + "  ", v.position_filt_front);
    s << indent << "velocity_filt_rear: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_filt_rear);
    s << indent << "velocity_filt_front: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_filt_front);
    s << indent << "dead_man_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dead_man_enable);
    s << indent << "controller_target: ";
    Printer<float>::stream(s, indent + "  ", v.controller_target);
    s << indent << "skate_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.skate_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_MESSAGE_SKATE_FEEDBACK_H
